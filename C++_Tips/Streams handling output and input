//Here is instruction for characters and below line 233 is my code with strings and stream handling


#include "stdafx.h"
#include "Exercises_10.h"

namespace Ex10
{
	//Stroustrup PPP chaper 10.11.2 way
	istream& operator >> (istream& is, Point& p)
	{
		char opening_bracket;
		if (is >> opening_bracket && opening_bracket != '(')
		{
			is.unget();
			is.clear(ios_base::failbit);
			return is;
		}
		
		double first_value = -5; 
		double second_value = -333;
		char comma; 
		char closing_bracket;

		is >> first_value >> comma >> second_value >> closing_bracket;
		if (!is) return is;
		if (opening_bracket != '(' || comma != ','  || closing_bracket != ')')
		{
			is.clear(ios_base::failbit);
			return is;
			
		}
		p = Point(first_value, second_value);
		return is;
	}
	
	

	ifstream& operator >> (ifstream& is, vector<Point>& vec_p)
	{

		while (is)
		{
			char c;
			double x = 9999129;
			double y = 312332;

			is >> c;
			if (c != '(')
			{
				is.unget();
				is.clear(ios_base::failbit);
				//error("Points_10: wrong input, no '(' at the beginning");
				break;
			}

			is >> c;
			if (!isalnum(c))
			{
				is.unget();
				is.clear(ios_base::failbit);
				break;
				//error("Points_10: wrong input, x coordinate is no a number");
			}

			is.unget();
			is >> x;
			is >> c;
			if (c != ',')
			{
				is.unget();
				is.clear(ios_base::failbit);
				break;
				//error("Wrong format: missing comma ',' in (x,y) exected");
			}


			is >> c;
			if (!isalnum(c))
			{
				is.unget();
				is.clear(ios_base::failbit);
				break;
				//error("Points_10: wrong input, y coordinate is no a number");
			}

			is.unget();
			is >> y;
			is >> c;
			if (c != ')')
			{
				is.unget();
				is.clear(ios_base::failbit);
				break;
				//error("Wrong format: missing closing bracket ')' in (x,y) expected");
			}
			vec_p.push_back(Point(x, y));
		}


		return is;
	}

	ostream& operator<<(ostream& os, vector<Point>& points)
	{
		for (int i = 0; i < points.size(); ++i)
		{
			os << '(' << points[i].get_x() << ',' << points[i].get_y() << ')' << " ";
		}
		return os;
	}


	vector<Point> get_points(const string& communicate, const char termination)
	{

		vector<Point> points;

		Point p;
		cout << communicate << endl;
		while (cin >> p) points.push_back(p);

		if (cin.eof()) return points;
		if (cin.bad()) error("Strumien Points_10 uszkodzony");
		if (cin.fail())
		{
			cin.clear();
			char c;
			cin >> c;
			if (c != termination)
			{
				cin.clear(ios_base::failbit);
			}
		}
		return points;
	}


	void clean_up_mess_10()
	{
		ignore_10(termination_sign());
	}

	void ignore_10(const char termination)
	{
		char c;
		cin.clear();
		while (cin >> c)
		{
			if (c == termination || c == '\n') return;
		}
		//cin.ignore(numeric_limits<int>::max(), '\n');
	}


	void cwiczenia_10()
	{

		/*
		cout << "Podaj nazwê pliku wejœciowego: ";
		string name;
		cin >> name;
		ifstream ist(name.c_str());
		if (!ist) error("Nie mo¿na otworzyæ pliku wejœiowego");
		*/
		vector<Point> original_points;
		original_points = get_points("Wpisz 7 elementów Point_10 w formacie (x,y)", termination_sign());

		cout << original_points << endl;
		save_inputted_data("mojedane.txt", original_points);

		vector<Point> processed_points;
		processed_points = read_inputted_data("mojedane.txt");

		cout << "Zawartoœæ wektora original_points: " << original_points << endl;
		cout << "Zawartoœæ wektora processed_points: " << processed_points << endl;

		compare_vectors(original_points, processed_points);


	}

	void save_inputted_data(const string& filename, vector<Point>& input_data)
	{

		cout << "Zapisywanie danych do pliku: " << filename << endl;
		ofstream ost(filename.c_str());
		ost << input_data;
	}


	vector<Point> read_inputted_data(const string& filename)
	{
		vector<Point> input_data;
		cout << "Odczytywanie danych z pliku: " << filename << endl;
		ifstream ist(filename.c_str());
		ist >> input_data;

		return input_data;
	}

	void compare_vectors(vector<Point>& first, vector<Point>& second)
	{
		if (first.size() != second.size())
		{
			cout << "Coœ jest nie tak!" << endl;
			return;
		}
		for (int i = 0; i < first.size(); ++i)
		{
			if (first[i].get_x() != second[i].get_x())
			{
				cout << "Coœ jest nie tak!" << endl;
				return;
			}

			if (first[i].get_y() != second[i].get_y())
			{
				cout << "Coœ jest nie tak!" << endl;
				return;
			}
		}
	}

	const char& termination_sign()
	{
		const static char termiantion = ';';
		return termiantion;
	}


}












//Example input Justin Bew , 21; Many Dun , 42; Jen Ims , 52; ????
//four question marks needed to stop the code becasue four inputs in is >> first_name >> last_name; is >> ch1 >> age >> ch2;
//Actually is 5 as you noticed however first_name >> last_name comes as one after space so it coudl be count as 1, I think...
struct Person
	{
	private:
		int age1;
		string first_name1;
		string last_name1;
	public:
		string first_name() const
		{
			return first_name1;
		}
		string last_name() const
		{
			return last_name1;
		}


		int age() const
		{
			return age1;
		}
		
		Person();
		Person(string first_name_c, string last_name_c, int age_c);
		~Person();
	

	};


	void find_wrong_symbols(const string& name)
	{
		for (int i = 0; i < name.size(); ++i)
		{
			switch (name[i])
			{
			case ';': case ':': case '"': case '\'':
			case '[': case ']': case '*': case '&':
			case '^': case '%': case '$': case '#':
			case '@': case '!': case ',': // I added the ',' to the code for distinct the name with the separator , (comma)
				error("Not allowed symol occured in the name ; : \" \' [ ] * & ^ % $ # @ ! ");
			default:
				break;
			}

		}
	}

	
	
	istream& operator>>(istream& is, Person& per)
	{
		string first_name = "";
		string last_name = "";
		int age;
		char ch1, ch2;
		is >> first_name >> last_name;
		find_wrong_symbols(first_name);
		find_wrong_symbols(last_name);
		
		is >> ch1 >> age >> ch2;
		if (ch1 != ',' || ch2 != ';')
		{
			is.unget();
			is.clear(ios_base::failbit);
			return is;
		}

		
		per = Person(first_name, last_name, age);
		return is;

	}
	


	ostream& operator<<(ostream& os, Person per)
	{
		return os << "name: " << per.first_name() << " " <<per.last_name() << "\nage: " << per.age() << std::endl;
	}

	ostream& operator<<(ostream& os, vector<Person>& person_vec)
	{
		for (int i = 0; i < person_vec.size(); ++i)
		{
			os << "Person " << i+1 << "\nName: " << person_vec[i].first_name() << " " << person_vec[i].last_name()
				<< "\nAge: " << person_vec[i].age() << "\n\n";
		}

		return os;
	}

	vector<Person> get_persons(const string& communicate, const char termination)
	{
		vector<Person> persons;
		Person p;
		
		cout << communicate << endl;
		while (cin >> p) persons.push_back(p);
		
		if (cin.eof()) return persons;
		if (cin.bad()) error("Stream persons is broken");
		if (cin.fail())
		{
			cin.clear();
			char c;
			cin >> c;
			if (c = !termination)
				cin.clear(ios_base::failbit);
		}
		return persons;
	}


	Person::Person() {}
	Person::Person(string first_name_c, string last_name_c, int age_c) : first_name1(first_name_c), last_name1(last_name_c), age1(age_c) 
	{
		if (age1 < 0 || age1 >149)
			error("age is smaller than 0 or bigger than 149");
		find_wrong_symbols(first_name1);
		find_wrong_symbols(last_name1);
	}
	Person::~Person() {}
	
	
	const char& termination_sign()
	{
		const static char termination = '-';
		return termination;
	}

	
	const static char termination = '?';

	int exercises()
	{
		

		string communicate = "Insert new persons, format: name [space] , [space] age; name1 [space] , [space] age2; ...\ntermination sign is "  ;
		communicate.push_back(termination);
		vector<Person> persons; //exercise 9
		persons = get_persons(communicate,termination);
			
		cout << persons;

		return 0;

